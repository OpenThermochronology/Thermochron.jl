## Test experimentally degassing various chronometers

    tsteps = cntr(0:30:3000)
    Tsteps = collect(range(600, 0, length=length(tsteps)))
    tsteps_degassing = tsteps # but now it's in seconds :p
    Tsteps_degassing = collect(range(0, 700, length=length(tsteps_degassing)))

    dm = Diffusivity(D0=0.6071, Ea=122.3)

    mineral = PlanarHe(r=50,dr=1,U238=33.0,Th232=24.2,Sm147=22.0,stoppingpower=Thermochron.alphastoppingpower("apatite"),tsteps=tsteps)
    @test modelage(mineral, Tsteps, dm) ≈ 207.92412570232977
    total_daughter = nanmean(mineral.y[2:end-1])
    step_tracer, step_daughter = Thermochron.degas!(mineral, tsteps_degassing, Tsteps_degassing, dm)
    # @info round.(step_tracer, sigdigits=4)
    @test round.(step_tracer, sigdigits=4) ≈ [4.0, 20.0, 60.0, 212.0, 684.0, 2096.0, 6104.0, 16940.0, 45040.0, 114900.0, 282100.0, 667800.0, 1.528e6, 3.387e6, 7.283e6, 1.522e7, 3.095e7, 6.138e7, 1.188e8, 2.247e8, 4.159e8, 7.54e8, 1.341e9, 2.339e9, 4.01e9, 6.758e9, 1.121e10, 1.83e10, 2.945e10, 4.672e10, 7.313e10, 1.13e11, 1.724e11, 2.6e11, 3.877e11, 5.715e11, 8.334e11, 1.202e12, 1.717e12, 2.427e12, 3.393e12, 4.695e12, 6.425e12, 8.691e12, 1.161e13, 1.53e13, 1.988e13, 2.541e13, 3.192e13, 3.939e13, 4.771e13, 5.675e13, 6.64e13, 7.659e13, 8.736e13, 9.881e13, 1.11e14, 1.242e14, 1.383e14, 1.535e14, 1.698e14, 1.874e14, 2.063e14, 2.265e14, 2.482e14, 2.714e14, 2.962e14, 3.226e14, 3.508e14, 3.808e14, 4.127e14, 4.465e14, 4.824e14, 5.204e14, 5.605e14, 6.029e14, 6.477e14, 6.948e14, 7.444e14, 7.965e14, 8.51e14, 9.075e14, 9.651e14, 1.022e15, 1.076e15, 1.122e15, 1.156e15, 1.174e15, 1.172e15, 1.147e15, 1.098e15, 1.025e15, 9.31e14, 8.204e14, 6.992e14, 5.742e14, 4.526e14, 3.41e14, 2.443e14, 3.989e14]
    # @info round.(step_daughter, sigdigits=4)
    @test round.(step_daughter, sigdigits=4) ≈  [0.0, 8.0, 12.0, 20.0, 136.0, 384.0, 1140.0, 3168.0, 8360.0, 21390.0, 52460.0, 124200.0, 284300.0, 630100.0, 1.355e6, 2.831e6, 5.758e6, 1.142e7, 2.21e7, 4.18e7, 7.737e7, 1.403e8, 2.494e8, 4.351e8, 7.459e8, 1.257e9, 2.085e9, 3.404e9, 5.478e9, 8.692e9, 1.361e10, 2.103e10, 3.209e10, 4.841e10, 7.219e10, 1.065e11, 1.554e11, 2.245e11, 3.21e11, 4.547e11, 6.378e11, 8.864e11, 1.22e12, 1.664e12, 2.248e12, 3.006e12, 3.979e12, 5.212e12, 6.753e12, 8.651e12, 1.096e13, 1.373e13, 1.703e13, 2.092e13, 2.547e13, 3.08e13, 3.699e13, 4.418e13, 5.25e13, 6.209e13, 7.312e13, 8.578e13, 1.002e14, 1.168e14, 1.355e14, 1.568e14, 1.808e14, 2.077e14, 2.377e14, 2.71e14, 3.077e14, 3.48e14, 3.918e14, 4.393e14, 4.904e14, 5.451e14, 6.034e14, 6.652e14, 7.304e14, 7.986e14, 8.695e14, 9.424e14, 1.016e15, 1.088e15, 1.156e15, 1.217e15, 1.266e15, 1.298e15, 1.31e15, 1.298e15, 1.26e15, 1.195e15, 1.106e15, 9.947e14, 8.675e14, 7.313e14, 5.937e14, 4.624e14, 3.439e14, 6.277e14]
    @test sum(step_tracer) ≈ sum(step_daughter) ≈ total_daughter ≈ 2.688023045019023e16 

    mineral = SphericalHe(r=50,dr=1,U238=33.0,Th232=24.2,Sm147=22.0,stoppingpower=Thermochron.alphastoppingpower("apatite"),tsteps=tsteps)
    @test modelage(mineral, Tsteps, dm) ≈ 128.23220078344227
    total_daughter = nanmean(mineral.y[2:end-1]./mineral.rsteps, mineral.relvolumes)
    step_tracer, step_daughter = Thermochron.degas!(mineral, tsteps_degassing, Tsteps_degassing, dm)
    # @info round.(step_tracer, sigdigits=4)
    @test round.(step_tracer, sigdigits=4) ≈ [8.0, 32.0, 114.0, 390.0, 1258.0, 3852.0, 11210.0, 31130.0, 82760.0, 211100.0, 518300.0, 1.227e6, 2.808e6, 6.224e6, 1.338e7, 2.796e7, 5.688e7, 1.128e8, 2.183e8, 4.129e8, 7.642e8, 1.386e9, 2.463e9, 4.298e9, 7.368e9, 1.242e10, 2.059e10, 3.363e10, 5.411e10, 8.585e10, 1.344e11, 2.076e11, 3.169e11, 4.778e11, 7.123e11, 1.05e12, 1.531e12, 2.209e12, 3.155e12, 4.458e12, 6.233e12, 8.623e12, 1.18e13, 1.595e13, 2.13e13, 2.806e13, 3.642e13, 4.651e13, 5.837e13, 7.19e13, 8.69e13, 1.031e14, 1.202e14, 1.381e14, 1.568e14, 1.763e14, 1.969e14, 2.186e14, 2.416e14, 2.657e14, 2.91e14, 3.175e14, 3.45e14, 3.736e14, 4.029e14, 4.33e14, 4.634e14, 4.94e14, 5.243e14, 5.54e14, 5.827e14, 6.096e14, 6.343e14, 6.56e14, 6.737e14, 6.867e14, 6.937e14, 6.937e14, 6.851e14, 6.667e14, 6.37e14, 5.95e14, 5.405e14, 4.746e14, 4.004e14, 3.223e14, 2.458e14, 1.764e14, 1.181e14, 7.307e13, 4.134e13, 2.11e13, 9.573e12, 3.782e12, 1.269e12, 3.493e11, 7.493e10, 1.153e10, 1.079e9, 3.6e7]
    # @info round.(step_daughter, sigdigits=4)
    @test round.(step_daughter, sigdigits=4) ≈ [2.0, 6.0, 24.0, 92.0, 294.0, 874.0, 2566.0, 7128.0, 18950.0, 48340.0, 118700.0, 281000.0, 643000.0, 1.425e6, 3.064e6, 6.403e6, 1.302e7, 2.582e7, 4.998e7, 9.454e7, 1.75e8, 3.172e8, 5.64e8, 9.841e8, 1.687e9, 2.843e9, 4.715e9, 7.7e9, 1.239e10, 1.966e10, 3.077e10, 4.755e10, 7.258e10, 1.095e11, 1.633e11, 2.408e11, 3.514e11, 5.075e11, 7.258e11, 1.028e12, 1.442e12, 2.003e12, 2.757e12, 3.758e12, 5.072e12, 6.777e12, 8.962e12, 1.172e13, 1.516e13, 1.937e13, 2.447e13, 3.056e13, 3.773e13, 4.613e13, 5.588e13, 6.714e13, 8.011e13, 9.498e13, 1.119e14, 1.312e14, 1.531e14, 1.778e14, 2.054e14, 2.363e14, 2.707e14, 3.085e14, 3.499e14, 3.947e14, 4.426e14, 4.93e14, 5.452e14, 5.982e14, 6.508e14, 7.015e14, 7.486e14, 7.903e14, 8.244e14, 8.486e14, 8.606e14, 8.578e14, 8.381e14, 7.999e14, 7.427e14, 6.676e14, 5.779e14, 4.791e14, 3.781e14, 2.821e14, 1.976e14, 1.288e14, 7.741e13, 4.241e13, 2.09e13, 9.114e12, 3.444e12, 1.098e12, 2.844e11, 5.662e10, 7.881e9, 6.418e8]
    @test sum(step_tracer) ≈ sum(step_daughter) ≈ total_daughter ≈ 1.6465637391602522e16

    mineral = ApatiteHe(r=50,dr=1,U238=33.0,Th232=24.2,Sm147=22.0,tsteps=tsteps)
    Thermochron.anneal!(mineral, Tsteps, RDAAM())
    @test modelage(mineral, Tsteps, RDAAM()) ≈  145.8681662856945
    total_daughter = nanmean(mineral.y[2:end-1]./mineral.rsteps, mineral.relvolumes)
    step_tracer, step_daughter = Thermochron.degas!(mineral, tsteps_degassing, Tsteps_degassing, RDAAM())
    # @info round.(step_tracer, sigdigits=4)
    @test round.(step_tracer, sigdigits=4) ≈ [8.0, 24.0, 88.0, 296.0, 968.0, 2948.0, 8600.0, 23880.0, 63480.0, 162000.0, 397600.0, 941300.0, 2.154e6, 4.773e6, 1.026e7, 2.145e7, 4.362e7, 8.647e7, 1.673e8, 3.165e8, 5.857e8, 1.062e9, 1.887e9, 3.293e9, 5.643e9, 9.508e9, 1.576e10, 2.573e10, 4.139e10, 6.564e10, 1.027e11, 1.586e11, 2.42e11, 3.647e11, 5.433e11, 8.004e11, 1.166e12, 1.682e12, 2.399e12, 3.388e12, 4.734e12, 6.543e12, 8.946e12, 1.209e13, 1.613e13, 2.124e13, 2.757e13, 3.521e13, 4.421e13, 5.452e13, 6.6e13, 7.848e13, 9.178e13, 1.058e14, 1.206e14, 1.363e14, 1.53e14, 1.709e14, 1.901e14, 2.106e14, 2.327e14, 2.564e14, 2.818e14, 3.089e14, 3.378e14, 3.687e14, 4.016e14, 4.366e14, 4.738e14, 5.132e14, 5.55e14, 5.991e14, 6.457e14, 6.943e14, 7.445e14, 7.945e14, 8.415e14, 8.817e14, 9.101e14, 9.22e14, 9.134e14, 8.818e14, 8.269e14, 7.506e14, 6.569e14, 5.52e14, 4.431e14, 3.381e14, 2.437e14, 1.648e14, 1.038e14, 6.027e13, 3.197e13, 1.529e13, 6.496e12, 2.407e12, 7.588e11, 1.971e11, 4.022e10, 6.555e9]
    # @info round.(step_daughter, sigdigits=4)
    @test round.(step_daughter, sigdigits=4) ≈ [4.0, 0.0, 28.0, 72.0, 256.0, 736.0, 2168.0, 6032.0, 16020.0, 40860.0, 100300.0, 237500.0, 543500.0, 1.204e6, 2.59e6, 5.411e6, 1.101e7, 2.182e7, 4.223e7, 7.986e7, 1.478e8, 2.679e8, 4.762e8, 8.308e8, 1.424e9, 2.399e9, 3.977e9, 6.493e9, 1.044e10, 1.657e10, 2.592e10, 4.004e10, 6.108e10, 9.207e10, 1.372e11, 2.023e11, 2.949e11, 4.257e11, 6.083e11, 8.607e11, 1.206e12, 1.674e12, 2.302e12, 3.135e12, 4.228e12, 5.645e12, 7.458e12, 9.749e12, 1.26e13, 1.61e13, 2.034e13, 2.54e13, 3.137e13, 3.838e13, 4.654e13, 5.599e13, 6.692e13, 7.95e13, 9.395e13, 1.105e14, 1.294e14, 1.51e14, 1.755e14, 2.033e14, 2.348e14, 2.702e14, 3.1e14, 3.543e14, 4.033e14, 4.571e14, 5.155e14, 5.781e14, 6.443e14, 7.131e14, 7.828e14, 8.512e14, 9.151e14, 9.708e14, 1.014e15, 1.039e15, 1.043e15, 1.021e15, 9.741e14, 9.015e14, 8.066e14, 6.952e14, 5.746e14, 4.533e14, 3.394e14, 2.398e14, 1.587e14, 9.761e13, 5.53e13, 2.855e13, 1.327e13, 5.461e12, 1.954e12, 5.926e11, 1.472e11, 3.28e10]
    @test sum(step_tracer) ≈ sum(step_daughter) ≈ total_daughter ≈ 1.875820848352221e16

    mineral = ZirconHe(r=50,dr=1,U238=33.0,Th232=24.2,Sm147=22.0,tsteps=tsteps)
    Thermochron.anneal!(mineral, Tsteps, ZRDAAM())
    @test modelage(mineral, Tsteps, ZRDAAM()) ≈ 592.1423333691473
    total_daughter = nanmean(mineral.y[2:end-1]./mineral.rsteps, mineral.relvolumes)
    step_tracer, step_daughter = Thermochron.degas!(mineral, tsteps_degassing, Tsteps_degassing, ZRDAAM())
    # @info round.(step_tracer, sigdigits=4)
    @test round.(step_tracer, sigdigits=4) ≈ [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 16.0, 80.0, 176.0, 448.0, 1056.0, 2400.0, 5376.0, 11700.0, 24750.0, 51250.0, 103600.0, 205000.0, 397400.0, 755000.0, 1.407e6, 2.577e6, 4.635e6, 8.202e6, 1.428e7, 2.45e7, 4.141e7, 6.9e7, 1.135e8, 1.841e8, 2.951e8, 4.674e8, 7.318e8, 1.133e9, 1.735e9, 2.631e9, 3.949e9, 5.871e9, 8.648e9, 1.262e10, 1.827e10, 2.622e10, 3.734e10, 5.274e10, 7.395e10, 1.029e11, 1.422e11, 1.953e11, 2.662e11, 3.607e11, 4.856e11, 6.498e11, 8.644e11, 1.143e12, 1.504e12, 1.967e12, 2.559e12, 3.312e12, 4.264e12, 5.463e12, 6.962e12, 8.83e12, 1.114e13, 1.399e13, 1.747e13, 2.171e13, 2.682e13, 3.296e13, 4.028e13, 4.891e13, 5.901e13, 7.072e13, 8.414e13, 9.935e13, 1.164e14, 1.352e14, 1.557e14, 1.778e14, 2.013e14, 2.26e14, 2.518e14, 2.785e14, 3.063e14, 3.35e14, 3.648e14, 3.959e14, 4.284e14, 4.623e14, 4.979e14, 5.353e14, 7.375e16]
    # @info round.(step_daughter, sigdigits=4)
    @test round.(step_daughter, sigdigits=4) ≈ [0.0, 0.0, 0.0, 16.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 32.0, 0.0, 32.0, 80.0, 192.0, 480.0, 1104.0, 2464.0, 5328.0, 11310.0, 23380.0, 47310.0, 93580.0, 181400.0, 344600.0, 642400.0, 1.176e6, 2.116e6, 3.744e6, 6.52e6, 1.118e7, 1.89e7, 3.15e7, 5.179e7, 8.405e7, 1.347e8, 2.134e8, 3.34e8, 5.172e8, 7.922e8, 1.201e9, 1.803e9, 2.68e9, 3.947e9, 5.763e9, 8.34e9, 1.197e10, 1.704e10, 2.408e10, 3.376e10, 4.698e10, 6.494e10, 8.913e10, 1.215e11, 1.647e11, 2.217e11, 2.966e11, 3.946e11, 5.22e11, 6.866e11, 8.982e11, 1.169e12, 1.513e12, 1.949e12, 2.497e12, 3.184e12, 4.04e12, 5.101e12, 6.41e12, 8.015e12, 9.971e12, 1.234e13, 1.52e13, 1.862e13, 2.268e13, 2.746e13, 3.305e13, 3.954e13, 4.697e13, 5.542e13, 6.493e13, 7.551e13, 8.716e13, 9.988e13, 1.137e14, 1.285e14, 1.444e14, 1.614e14, 1.796e14, 1.991e14, 2.201e14, 2.427e14, 2.671e14, 2.935e14, 3.221e14, 7.627e16]
    @test sum(step_tracer) ≈ sum(step_daughter) ≈ total_daughter ≈ 7.918470224804216e16

## --- Import a single-domain diffusion dataset

    datapath = joinpath("..", "examples", "vis.csv")
    ds = importdataset(datapath, importas=:Tuple)

    datapath = joinpath("..", "examples", "vis-03a.csv")
    sdds = importdataset(datapath, importas=:Tuple)

    agesteps = cntr(450:-2:0.0)
    tsteps = reverse(agesteps)
    Tsteps = [fill(150., 223); fill(10., 2)]

## --- Test Single Domain Diffusion with with ApatiteHe

    Rstep = sdds.He_4_He_3
    Rstep_sigma = sdds.He_4_He_3_sigma
    Rbulk = nanmean(sdds.He_4_He_3, sdds.He_3)
    sdd = SingleDomain(Float64, ApatiteHe;
        step_age = Rstep./Rbulk,
        step_age_sigma = Rstep_sigma./Rbulk,
        fraction_experimental = cumsum(sdds.He_3)./sum(sdds.He_3),
        tsteps_experimental = issorted(sdds.time_s, lt=<=) ? sdds.time_s : cumsum(sdds.time_s),
        Tsteps_experimental = sdds.temperature_C,
        fit = sdds.fit,
        agesteps,
        r = ds.halfwidth_um[19],
        age = ds.raw_He_age_Ma[19],
        age_sigma = ds.raw_He_age_sigma_Ma[19],
        U238 = ds.U238_ppm[19],
        Th232 = ds.Th232_ppm[19],
        Sm147 = ds.Sm147_ppm[19],
    )
    @test sdd isa SingleDomain{Float64, <:ApatiteHe{Float64}}
    show(sdd)
    println()
    display(sdd)

    Thermochron.anneal!(sdd.domain, Tsteps, RDAAM())
    age, stepage, fraction = modelage(sdd, Tsteps, RDAAM())
    println(round.(age, sigdigits=5))
    println(round.(stepage, sigdigits=5))
    println(round.(fraction, sigdigits=5))
    @test age ≈ 3.496876896607904
    @test round.(stepage, sigdigits=5) == [0.48743, 0.48851, 0.48972, 0.49107, 0.49257, 0.49423, 0.49607, 0.49809, 0.50031, 0.50273, 0.50537, 0.50822, 0.51129, 0.51453, 0.51779, 0.52099, 0.52412, 0.5272, 0.5302, 0.53314, 0.53601, 0.53881, 0.54155, 0.54422, 0.54683, 0.54938, 0.55186, 0.55429, 0.55667, 0.559, 0.56128, 0.56351, 0.5657, 0.56786, 0.56997, 0.57206, 0.57411, 0.57614, 0.57814, 0.58013, 0.58209, 0.58403, 0.58596, 0.58787, 0.58977, 0.59166, 0.59359, 0.59559, 0.59768, 0.59987, 0.60214, 0.60452, 0.60699, 0.60956, 0.61223, 0.61501, 0.61789, 0.62086, 0.62387, 0.62689, 0.62992, 0.63297, 0.63605, 0.63914, 0.64227, 0.64542, 0.6486, 0.65181, 0.65505, 0.65832, 0.66163, 0.66496, 0.66833, 0.67173, 0.67516, 0.67863, 0.68213, 0.68568, 0.68926, 0.69288, 0.6965, 0.70007, 0.70357, 0.70701, 0.71037, 0.71367, 0.71691, 0.72009, 0.72322, 0.72628, 0.7293, 0.73227, 0.73518, 0.73805, 0.74086, 0.74364, 0.74639, 0.7492, 0.75212, 0.75516, 0.75832, 0.7616, 0.765, 0.76852, 0.77216, 0.77592, 0.7798, 0.78379, 0.7879, 0.79214, 0.79657, 0.80128, 0.80624, 0.81147, 0.81697, 0.82271, 0.8287, 0.83492, 0.84137, 0.84801, 0.85484, 0.86177, 0.86859, 0.87518, 0.88154, 0.8877, 0.89365, 0.89941, 0.90498, 0.91037, 0.91559, 0.92064, 0.92554, 0.93027, 0.93486, 0.93929, 0.94357, 0.9477, 0.95171, 0.95558, 0.95932, 0.96294, 0.96645, 0.96984, 0.97312, 0.97629, 0.97936, 0.98234, 0.98524, 0.9881, 0.9909, 0.99365, 0.99634, 0.99897, 1.0015, 1.004, 1.0065, 1.0089, 1.0112, 1.0135, 1.0157, 1.0178, 1.0199, 1.022, 1.0241, 1.0262, 1.0284, 1.0307, 1.033, 1.0353, 1.0378, 1.0403, 1.043, 1.0458, 1.0488, 1.052, 1.0553, 1.0588, 1.0626, 1.0665, 1.0706, 1.075, 1.0797, 1.0846, 1.0898, 1.0954, 1.1012, 1.1074, 1.1141, 1.1216, 1.1298, 1.139, 1.1492, 1.1605, 1.1731, 1.1871, 1.2025, 1.2197, 1.2389, 1.2601, 1.285, 1.3169, 1.3593, 1.416, 1.4929, 1.5998, 1.7551, 1.9986, 2.444, 3.6631, Inf, 0.0, Inf, 0.0, Inf, 0.0, Inf, 0.0, Inf, 0.0, Inf, 0.0, Inf, 0.0, Inf]
    @test round.(fraction, sigdigits=5) == [0.00023433, 0.0004965, 0.00078912, 0.0011149, 0.0014768, 0.0018777, 0.0023205, 0.0028083, 0.0033441, 0.0039307, 0.0045712, 0.0052682, 0.0060243, 0.0068148, 0.0076023, 0.0083871, 0.0091695, 0.0099499, 0.010729, 0.011506, 0.012283, 0.013059, 0.013834, 0.01461, 0.015387, 0.016164, 0.016942, 0.017721, 0.018503, 0.019286, 0.020072, 0.020861, 0.021652, 0.022447, 0.023245, 0.024047, 0.024853, 0.025663, 0.026478, 0.027297, 0.028122, 0.028951, 0.029786, 0.030627, 0.031473, 0.032326, 0.033221, 0.034167, 0.035166, 0.036218, 0.037327, 0.038494, 0.03972, 0.041007, 0.042356, 0.043771, 0.045251, 0.046772, 0.048309, 0.049862, 0.051431, 0.053018, 0.054623, 0.056247, 0.05789, 0.059552, 0.061234, 0.062937, 0.064659, 0.066399, 0.068158, 0.069935, 0.071732, 0.073548, 0.075385, 0.077242, 0.079121, 0.081021, 0.082943, 0.084888, 0.086821, 0.088717, 0.090577, 0.092405, 0.0942, 0.095966, 0.097704, 0.099414, 0.1011, 0.10276, 0.10439, 0.10601, 0.1076, 0.10917, 0.11072, 0.11225, 0.11379, 0.11539, 0.11707, 0.11883, 0.12066, 0.12258, 0.12457, 0.12665, 0.12882, 0.13107, 0.13341, 0.13585, 0.13837, 0.14102, 0.14386, 0.1469, 0.15017, 0.15365, 0.15737, 0.16134, 0.16556, 0.17004, 0.17479, 0.17982, 0.18514, 0.19065, 0.19615, 0.20165, 0.20716, 0.21266, 0.21818, 0.22371, 0.22924, 0.2348, 0.24037, 0.24597, 0.25158, 0.25722, 0.26287, 0.26853, 0.2742, 0.27989, 0.2856, 0.29132, 0.29707, 0.30284, 0.30863, 0.31444, 0.32029, 0.32616, 0.33205, 0.338, 0.34408, 0.3503, 0.35665, 0.36314, 0.36977, 0.37653, 0.38344, 0.3905, 0.39769, 0.40503, 0.41252, 0.42016, 0.42794, 0.43588, 0.44396, 0.45244, 0.46146, 0.47103, 0.48117, 0.4919, 0.50321, 0.51513, 0.52766, 0.5408, 0.55455, 0.56889, 0.58382, 0.5992, 0.61479, 0.63055, 0.64646, 0.66248, 0.67856, 0.69466, 0.71074, 0.72675, 0.74263, 0.75834, 0.77383, 0.78905, 0.80467, 0.82057, 0.83659, 0.85258, 0.86838, 0.88379, 0.89864, 0.91276, 0.92599, 0.93819, 0.94925, 0.95909, 0.96861, 0.97773, 0.98569, 0.9919, 0.9961, 0.99848, 0.99956, 0.99992, 0.99999, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]

    @test Thermochron.model_ll(sdd) ≈ 6.504909792906135
    @test Thermochron.model_ll(sdd; rescale=true) ≈ 1.6262274482265338

## --- Import a Multiple Domain Diffusion dataset

    datapath = joinpath("..", "examples", "ol13-mdd.csv")
    mdds = importdataset(datapath, importas=:Tuple)

    agesteps = 995:-10.:5
    tsteps = reverse(agesteps)
    Tsteps = [fill(320., 25); fill(130., 75)]

## --- Test Multiple Domain Diffusion with with PlanarAr
    mdd = MultipleDomain(Float64, PlanarAr;
        step_age = mdds.age_Ma,
        step_age_sigma = mdds.age_sigma_Ma,
        fraction_experimental = mdds.fraction_degassed,
        tsteps_experimental = issorted(mdds.time_s, lt=<=) ? mdds.time_s : cumsum(mdds.time_s),
        Tsteps_experimental = mdds.temperature_C,
        fit = mdds.fit,
        volume_fraction = mdds.volume_fraction[.!isnan.(mdds.volume_fraction)],
        agesteps,
    )
    @test mdd isa MultipleDomain{Float64, <:PlanarAr{Float64}}
    show(mdd)
    println()
    display(mdd)

    tdomains = .!isnan.(mdds.lnD0_a_2)
    dm = MDDiffusivity(
        D0 = (Float64.(exp.(mdds.lnD0_a_2[tdomains]).*(100/10000)^2)...,),
        D0_logsigma = (Float64.(haskey(mdds, :lnD0_a_2_sigma) ? mdds.lnD0_a_2_sigma[tdomains] : fill(log(2)/2, count(tdomains)))...,),
        Ea = (Float64.(mdds.Ea_kJ_mol[tdomains])...,),
        Ea_logsigma = (Float64.(haskey(mdds, :Ea_logsigma) ? mdds.Ea_logsigma[tdomains] : fill(log(2)/2, count(tdomains)))...,),
    )

    age, fraction = modelage(mdd, Tsteps, dm)
    # println(round.(age, sigdigits=5))
    # println(round.(fraction, sigdigits=5))
    @test round.(age, sigdigits=5) == [154.94, 217.94, 289.32, 358.84, 414.61, 460.5, 509.29, 547.24, 583.79, 616.32, 640.09, 662.0, 679.38, 692.71, 705.09, 714.04, 722.54, 729.61, 733.62, 736.62, 738.7, 740.32, 742.11, 743.55, 744.96, 746.07, 746.61, 747.06, 747.81, 749.02, 750.22, 750.56, 750.11, 750.41, 750.53, 749.47, 748.91, 749.65, 750.43, 750.88, 750.97, 751.02, 751.43, 752.13, 752.94, 753.67, 754.36, 754.96, 755.55, 756.07, 756.58, 757.05, 757.53, 757.96, 758.42, 758.84, 759.3, 759.71, 760.17, 760.59, 761.05, 761.47, 761.94, 762.35, 762.82, 763.23, 763.7, 764.11, 764.58, 764.98, 765.45, 765.84, 766.31, 766.69, 767.15, 767.53, 767.99, 768.36, 768.81, 769.17, 769.62, 769.97, 770.43, 770.85, 771.46, 772.1, 772.94, 773.87, 775.02, 776.31, 777.87, 779.73, 781.96, 784.52, 787.62, 791.45, 796.25, 802.46, 810.99, 892.04]
    @test round.(fraction, sigdigits=5) == [0.00017134, 0.00049258, 0.0009698, 0.0015041, 0.0019328, 0.0025828, 0.0032327, 0.0039057, 0.0049035, 0.0057523, 0.0068191, 0.0081277, 0.0092747, 0.010963, 0.012691, 0.014649, 0.01806, 0.020947, 0.024381, 0.028374, 0.031873, 0.0376, 0.043318, 0.049084, 0.057303, 0.063745, 0.071628, 0.082742, 0.097153, 0.11363, 0.1299, 0.14469, 0.15855, 0.17196, 0.18456, 0.1972, 0.21123, 0.22671, 0.24298, 0.25906, 0.27435, 0.28964, 0.30532, 0.32034, 0.33309, 0.34413, 0.35384, 0.36249, 0.3703, 0.3774, 0.38392, 0.38995, 0.39555, 0.4008, 0.40572, 0.41037, 0.41477, 0.41895, 0.42292, 0.42672, 0.43034, 0.43381, 0.43714, 0.44034, 0.44342, 0.44638, 0.44924, 0.45199, 0.45465, 0.45723, 0.45972, 0.46213, 0.46448, 0.46675, 0.46895, 0.47109, 0.47318, 0.4752, 0.47718, 0.4791, 0.48098, 0.48281, 0.48471, 0.48699, 0.48967, 0.49281, 0.49644, 0.5006, 0.5053, 0.51056, 0.51656, 0.52367, 0.53131, 0.53987, 0.54981, 0.56162, 0.57526, 0.59266, 0.61401, 1.0]

    @test Thermochron.model_ll(mdd; rescale=true) ≈ -1174.276593000028

## --- Test Multiple Domain Diffusion with SphericalAr
    mdd = MultipleDomain(Float64, SphericalAr;
        step_age = mdds.age_Ma,
        step_age_sigma = mdds.age_sigma_Ma,
        fraction_experimental = mdds.fraction_degassed,
        tsteps_experimental = issorted(mdds.time_s, lt=<=) ? mdds.time_s : cumsum(mdds.time_s),
        Tsteps_experimental = mdds.temperature_C,
        fit = mdds.fit,
        volume_fraction = mdds.volume_fraction[.!isnan.(mdds.volume_fraction)],
        agesteps,
    )
    @test mdd isa MultipleDomain{Float64, <:SphericalAr{Float64}}

    age, fraction = modelage(mdd, Tsteps, dm)
    # println(round.(age, sigdigits=5))
    # println(round.(fraction, sigdigits=5))
    @test round.(age, sigdigits=5) == [146.5, 206.93, 275.91, 343.66, 398.52, 443.89, 492.63, 530.82, 567.9, 601.29, 625.87, 648.75, 667.16, 681.36, 694.79, 704.61, 714.1, 722.43, 727.57, 732.12, 735.92, 738.96, 741.87, 743.52, 744.95, 746.25, 747.28, 748.31, 749.04, 749.08, 749.32, 749.53, 748.93, 748.65, 749.07, 749.46, 749.61, 749.52, 749.69, 750.23, 750.89, 751.46, 751.95, 752.41, 752.95, 753.51, 754.11, 754.63, 755.17, 755.63, 756.11, 756.51, 756.96, 757.33, 757.76, 758.1, 758.53, 758.84, 759.26, 759.56, 759.97, 760.25, 760.66, 760.92, 761.32, 761.56, 761.96, 762.18, 762.58, 762.78, 763.18, 763.36, 763.75, 763.93, 764.32, 764.48, 764.87, 765.01, 765.41, 765.54, 765.93, 766.06, 766.46, 766.65, 767.13, 767.49, 768.1, 768.67, 769.47, 770.3, 771.38, 772.6, 774.13, 775.82, 777.91, 780.4, 783.46, 787.15, 791.71, 809.16]
    @test round.(fraction, sigdigits=5) == [0.00051295, 0.0014691, 0.0028787, 0.0044427, 0.0056867, 0.0075558, 0.0094035, 0.011295, 0.014059, 0.016372, 0.019231, 0.022664, 0.025607, 0.029827, 0.03401, 0.038581, 0.046138, 0.052108, 0.058747, 0.065895, 0.071743, 0.080805, 0.089484, 0.098115, 0.11023, 0.11934, 0.12955, 0.14194, 0.15536, 0.16944, 0.18429, 0.1994, 0.21523, 0.23292, 0.25239, 0.27304, 0.2946, 0.31734, 0.34162, 0.36628, 0.38935, 0.41106, 0.43168, 0.45023, 0.46537, 0.47819, 0.48927, 0.49902, 0.50772, 0.51556, 0.52271, 0.52927, 0.53533, 0.54098, 0.54626, 0.55123, 0.55591, 0.56035, 0.56456, 0.56858, 0.57241, 0.57608, 0.5796, 0.58299, 0.58625, 0.58939, 0.59242, 0.59536, 0.5982, 0.60095, 0.60362, 0.60622, 0.60875, 0.61121, 0.6136, 0.61594, 0.61821, 0.62044, 0.62261, 0.62474, 0.62681, 0.62885, 0.63097, 0.63352, 0.63654, 0.64009, 0.64422, 0.64897, 0.65439, 0.6605, 0.6675, 0.67587, 0.6849, 0.69507, 0.70688, 0.72093, 0.73712, 0.7577, 0.78295, 1.0]

    @test Thermochron.model_ll(mdd; rescale=true) ≈ -1316.160260275503

## --- End of File