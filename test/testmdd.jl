## --- Import an MDD dataset

    datapath = joinpath("..", "examples", "ol13.csv")
    mdds = importdataset(datapath, importas=:Tuple)

    agesteps = 995:-10.:5
    tsteps = reverse(agesteps)
    Tsteps = range(250, 0., length(tsteps))

## --- Test Multiple Domain Diffusion with with PlanarAr
    mdd = MultipleDomain(Float64, PlanarAr;
        age = mdds.age_Ma,
        age_sigma = mdds.age_sigma_Ma,
        fraction_released = mdds.fraction_degassed,
        tsteps_experimental = issorted(mdds.time_s, lt=<=) ? mdds.time_s : cumsum(mdds.time_s),
        Tsteps_experimental = mdds.temperature_C,
        fit = mdds.fit,
        volume_fraction = mdds.volume_fraction[.!isnan.(mdds.volume_fraction)],
        lnD0_a_2 = mdds.lnD0_a_2[.!isnan.(mdds.lnD0_a_2)],
        Ea = mdds.Ea_kJ_mol[.!isnan.(mdds.Ea_kJ_mol)],
        agesteps,
    )
    @test mdd isa MultipleDomain{Float64, PlanarAr{Float64}}

    age, fraction = modelage(mdd, Tsteps)
    println(round.(age, sigdigits=5))
    println(round.(fraction, sigdigits=5))
    @test round.(age, sigdigits=5) == [521.05, 545.82, 566.76, 583.76, 596.59, 606.8, 617.98, 627.06, 636.57, 645.86, 653.68, 661.97, 669.6, 676.71, 684.42, 691.32, 699.4, 707.7, 713.94, 720.02, 725.49, 731.55, 739.63, 748.2, 758.74, 769.96, 777.9, 784.97, 792.03, 801.81, 817.47, 838.89, 859.52, 877.62, 901.13, 922.3, 933.31, 941.89, 952.13, 963.15, 972.3, 978.02, 981.34, 983.75, 985.68, 987.29, 988.57, 989.7, 990.59, 991.4, 992.03, 992.62, 993.07, 993.51, 993.84, 994.19, 994.44, 994.73, 994.93, 995.18, 995.35, 995.57, 995.72, 995.91, 996.05, 996.22, 996.34, 996.5, 996.61, 996.74, 996.85, 996.97, 997.06, 997.16, 997.25, 997.34, 997.42, 997.49, 997.57, 997.62, 997.7, 997.74, 997.82, 997.87, 997.96, 998.02, 998.12, 998.19, 998.28, 998.35, 998.43, 998.49, 998.57, 998.62, 998.68, 998.72, 998.77, 998.82, 998.95, 1001.2]
    @test round.(fraction, sigdigits=5) == [0.00017134, 0.00049258, 0.0009698, 0.0015041, 0.0019328, 0.0025828, 0.0032327, 0.0039057, 0.0049035, 0.0057523, 0.0068191, 0.0081277, 0.0092747, 0.010963, 0.012691, 0.014649, 0.01806, 0.020947, 0.024381, 0.028374, 0.031873, 0.0376, 0.043318, 0.049084, 0.057303, 0.063745, 0.071628, 0.082742, 0.097153, 0.11363, 0.1299, 0.14469, 0.15855, 0.17196, 0.18456, 0.1972, 0.21123, 0.22671, 0.24298, 0.25906, 0.27435, 0.28964, 0.30532, 0.32034, 0.33309, 0.34413, 0.35384, 0.36249, 0.3703, 0.3774, 0.38392, 0.38995, 0.39555, 0.4008, 0.40572, 0.41037, 0.41477, 0.41895, 0.42292, 0.42672, 0.43034, 0.43381, 0.43714, 0.44034, 0.44342, 0.44638, 0.44924, 0.45199, 0.45465, 0.45723, 0.45972, 0.46213, 0.46448, 0.46675, 0.46895, 0.47109, 0.47318, 0.4752, 0.47718, 0.4791, 0.48098, 0.48281, 0.48471, 0.48699, 0.48967, 0.49281, 0.49644, 0.5006, 0.5053, 0.51056, 0.51656, 0.52367, 0.53131, 0.53987, 0.54981, 0.56162, 0.57526, 0.59266, 0.61401, 1.0]

## --- Test Multiple Domain Diffusion with SphericalAr
    mdd = MultipleDomain(Float64, SphericalAr;
        age = mdds.age_Ma,
        age_sigma = mdds.age_sigma_Ma,
        fraction_released = mdds.fraction_degassed,
        tsteps_experimental = issorted(mdds.time_s, lt=<=) ? mdds.time_s : cumsum(mdds.time_s),
        Tsteps_experimental = mdds.temperature_C,
        fit = mdds.fit,
        volume_fraction = mdds.volume_fraction[.!isnan.(mdds.volume_fraction)],
        lnD0_a_2 = mdds.lnD0_a_2[.!isnan.(mdds.lnD0_a_2)],
        Ea = mdds.Ea_kJ_mol[.!isnan.(mdds.Ea_kJ_mol)],
        agesteps,
    )
    @test mdd isa MultipleDomain{Float64, SphericalAr{Float64}}

    age, fraction = modelage(mdd, Tsteps)
    println(round.(age, sigdigits=5))
    println(round.(fraction, sigdigits=5))
    @test round.(age, sigdigits=5) == [518.11, 541.94, 561.78, 577.64, 589.51, 598.8, 608.97, 617.12, 625.62, 633.89, 640.81, 648.12, 654.88, 661.18, 668.13, 674.47, 682.22, 690.96, 698.42, 706.69, 714.68, 722.65, 731.53, 738.52, 745.88, 754.25, 762.69, 775.19, 793.28, 813.04, 831.25, 853.32, 874.6, 888.83, 901.99, 916.19, 930.87, 943.31, 952.44, 959.81, 966.63, 972.7, 977.95, 981.88, 984.68, 986.53, 988.1, 989.24, 990.35, 991.1, 991.93, 992.41, 993.07, 993.35, 993.9, 994.06, 994.54, 994.61, 995.05, 995.04, 995.46, 995.39, 995.79, 995.68, 996.07, 995.92, 996.31, 996.12, 996.51, 996.29, 996.69, 996.43, 996.83, 996.55, 996.96, 996.66, 997.08, 996.76, 997.18, 996.85, 997.28, 996.93, 997.37, 997.11, 997.48, 997.33, 997.63, 997.55, 997.82, 997.81, 998.07, 998.12, 998.36, 998.43, 998.65, 998.71, 998.85, 998.86, 998.91, 1002.5]
    @test round.(fraction, sigdigits=5) == [0.00051295, 0.0014691, 0.0028787, 0.0044427, 0.0056867, 0.0075558, 0.0094035, 0.011295, 0.014059, 0.016372, 0.019231, 0.022664, 0.025607, 0.029827, 0.03401, 0.038581, 0.046138, 0.052108, 0.058747, 0.065895, 0.071743, 0.080805, 0.089484, 0.098115, 0.11023, 0.11934, 0.12955, 0.14194, 0.15536, 0.16944, 0.18429, 0.1994, 0.21523, 0.23292, 0.25239, 0.27304, 0.2946, 0.31734, 0.34162, 0.36628, 0.38935, 0.41106, 0.43168, 0.45023, 0.46537, 0.47819, 0.48927, 0.49902, 0.50772, 0.51556, 0.52271, 0.52927, 0.53533, 0.54098, 0.54626, 0.55123, 0.55591, 0.56035, 0.56456, 0.56858, 0.57241, 0.57608, 0.5796, 0.58299, 0.58625, 0.58939, 0.59242, 0.59536, 0.5982, 0.60095, 0.60362, 0.60622, 0.60875, 0.61121, 0.6136, 0.61594, 0.61821, 0.62044, 0.62261, 0.62474, 0.62681, 0.62885, 0.63097, 0.63352, 0.63654, 0.64009, 0.64422, 0.64897, 0.65439, 0.6605, 0.6675, 0.67587, 0.6849, 0.69507, 0.70688, 0.72093, 0.73712, 0.7577, 0.78295, 1.0]

## --- End of File