## --- Import an MDD dataset

    datapath = joinpath("..", "examples", "ol13.csv")
    mdds = importdataset(datapath, importas=:Tuple)

    agesteps = 995:-10.:5
    tsteps = reverse(agesteps)
    Tsteps = range(250, 0., length(tsteps))

## --- Test Multiple Domain Diffusion with with PlanarAr
    mdd = MultipleDomain(Float64, PlanarAr;
        age = mdds.age_Ma,
        age_sigma = mdds.age_sigma_Ma,
        fraction_released = mdds.fraction_degassed,
        tsteps_experimental = issorted(mdds.time_s, lt=<=) ? mdds.time_s : cumsum(mdds.time_s),
        Tsteps_experimental = mdds.temperature_C,
        fit = mdds.fit,
        volume_fraction = mdds.volume_fraction[.!isnan.(mdds.volume_fraction)],
        lnD0_a_2 = mdds.lnD0_a_2[.!isnan.(mdds.lnD0_a_2)],
        Ea = mdds.Ea_kJ_mol[.!isnan.(mdds.Ea_kJ_mol)],
        agesteps,
    )
    @test mdd isa MultipleDomain{Float64, PlanarAr{Float64}}

    age, fraction = modelage(mdd, Tsteps)
    println(round.(age, sigdigits=5))
    println(round.(fraction, sigdigits=5))
    @test round.(age, sigdigits=5) == [521.05, 545.82, 566.76, 583.76, 596.59, 606.8, 617.98, 627.06, 636.57, 645.86, 653.68, 661.97, 669.6, 676.71, 684.42, 691.32, 699.4, 707.7, 713.94, 720.02, 725.49, 731.55, 739.63, 748.2, 758.74, 769.96, 777.9, 784.97, 792.07, 801.81, 817.48, 838.89, 859.53, 877.82, 901.14, 922.38, 933.49, 941.93, 952.15, 963.18, 972.31, 978.05, 981.35, 983.78, 985.69, 987.32, 988.59, 989.75, 990.61, 991.46, 992.05, 992.68, 993.09, 993.58, 993.87, 994.26, 994.47, 994.8, 994.97, 995.25, 995.39, 995.64, 995.76, 995.98, 996.09, 996.29, 996.39, 996.56, 996.66, 996.81, 996.9, 997.03, 997.12, 997.22, 997.31, 997.39, 997.48, 997.54, 997.63, 997.68, 997.77, 997.79, 997.89, 997.91, 998.01, 998.05, 998.15, 998.21, 998.31, 998.36, 998.45, 998.5, 998.58, 998.63, 998.69, 998.73, 998.78, 998.83, 998.96, 999.18]
    @test round.(fraction, sigdigits=5) == [0.00026905, 0.00077347, 0.0015228, 0.0023619, 0.003035, 0.0040556, 0.0050762, 0.006133, 0.0076998, 0.0090326, 0.010708, 0.012763, 0.014564, 0.017214, 0.019929, 0.023003, 0.02836, 0.032892, 0.038285, 0.044554, 0.050048, 0.059042, 0.06802, 0.077075, 0.08998, 0.1001, 0.11248, 0.12993, 0.15255, 0.17842, 0.20397, 0.2272, 0.24895, 0.26996, 0.28974, 0.30958, 0.33159, 0.35589, 0.38143, 0.40668, 0.43069, 0.45469, 0.47931, 0.50289, 0.52291, 0.54024, 0.55549, 0.56908, 0.58133, 0.59248, 0.60272, 0.61218, 0.62098, 0.62921, 0.63695, 0.64425, 0.65115, 0.65771, 0.66395, 0.6699, 0.6756, 0.68105, 0.68627, 0.69129, 0.69612, 0.70077, 0.70526, 0.70958, 0.71377, 0.71781, 0.72172, 0.72551, 0.72918, 0.73275, 0.73621, 0.73957, 0.74284, 0.74603, 0.74913, 0.75214, 0.75509, 0.75796, 0.76096, 0.76453, 0.76874, 0.77367, 0.77937, 0.78589, 0.79327, 0.80154, 0.81095, 0.82212, 0.83412, 0.84757, 0.86317, 0.88172, 0.90314, 0.93045, 0.96398, 1.0]

## --- Test Multiple Domain Diffusion with SphericalAr
    mdd = MultipleDomain(Float64, SphericalAr;
        age = mdds.age_Ma,
        age_sigma = mdds.age_sigma_Ma,
        fraction_released = mdds.fraction_degassed,
        tsteps_experimental = issorted(mdds.time_s, lt=<=) ? mdds.time_s : cumsum(mdds.time_s),
        Tsteps_experimental = mdds.temperature_C,
        fit = mdds.fit,
        volume_fraction = mdds.volume_fraction[.!isnan.(mdds.volume_fraction)],
        lnD0_a_2 = mdds.lnD0_a_2[.!isnan.(mdds.lnD0_a_2)],
        Ea = mdds.Ea_kJ_mol[.!isnan.(mdds.Ea_kJ_mol)],
        agesteps,
    )
    @test mdd isa MultipleDomain{Float64, SphericalAr{Float64}}

    age, fraction = modelage(mdd, Tsteps)
    println(round.(age, sigdigits=5))
    println(round.(fraction, sigdigits=5))
    @test round.(age, sigdigits=5) == [518.11, 541.94, 561.78, 577.64, 589.51, 598.8, 608.97, 617.12, 625.62, 633.89, 640.81, 648.12, 654.88, 661.18, 668.13, 674.47, 682.22, 690.96, 698.42, 706.69, 714.68, 722.65, 731.53, 738.52, 745.88, 754.24, 762.7, 775.19, 793.29, 813.04, 831.49, 853.32, 874.7, 889.03, 902.04, 916.23, 930.91, 943.33, 952.48, 959.82, 966.68, 972.72, 978.0, 981.89, 984.75, 986.55, 988.19, 989.26, 990.47, 991.12, 992.08, 992.43, 993.23, 993.37, 994.09, 994.08, 994.75, 994.62, 995.27, 995.05, 995.7, 995.4, 996.05, 995.68, 996.35, 995.92, 996.6, 996.12, 996.82, 996.29, 997.0, 996.43, 997.17, 996.55, 997.31, 996.66, 997.44, 996.76, 997.56, 996.85, 997.67, 996.93, 997.75, 997.11, 997.74, 997.33, 997.82, 997.55, 997.97, 997.81, 998.18, 998.12, 998.45, 998.43, 998.71, 998.71, 998.9, 998.86, 998.94, 998.91]
    @test round.(fraction, sigdigits=5) == [0.00063323, 0.0018136, 0.0035537, 0.0054845, 0.0070202, 0.0093276, 0.011609, 0.013943, 0.017356, 0.020212, 0.023741, 0.027979, 0.031611, 0.036821, 0.041985, 0.047628, 0.056957, 0.064327, 0.072524, 0.081348, 0.088567, 0.099754, 0.11047, 0.12112, 0.13608, 0.14732, 0.15993, 0.17523, 0.19179, 0.20917, 0.22745, 0.24611, 0.26564, 0.28744, 0.31146, 0.33695, 0.36355, 0.39162, 0.42159, 0.45203, 0.48051, 0.50731, 0.53276, 0.55566, 0.57435, 0.59016, 0.60384, 0.61588, 0.62661, 0.63629, 0.6451, 0.65321, 0.66069, 0.66766, 0.67418, 0.68031, 0.68608, 0.69156, 0.69676, 0.70172, 0.70644, 0.71098, 0.71532, 0.71949, 0.72351, 0.72739, 0.73113, 0.73475, 0.73826, 0.74166, 0.74495, 0.74816, 0.75127, 0.75431, 0.75726, 0.76014, 0.76295, 0.7657, 0.76837, 0.771, 0.77356, 0.77607, 0.77869, 0.78184, 0.78556, 0.78995, 0.79504, 0.80091, 0.80759, 0.81513, 0.82378, 0.8341, 0.84525, 0.8578, 0.87238, 0.88973, 0.9097, 0.93512, 0.96628, 1.0]

## --- End of File